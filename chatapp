<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personal Chat App with Friend System</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            width: 100%;
            max-width: 1000px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 95vh;
        }
        
        .header {
            background: #6e8efb;
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
        }
        
        .app-title {
            font-size: 24px;
            font-weight: 600;
        }
        
        .user-status {
            position: absolute;
            right: 20px;
            top: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #a777e3;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }
        
        .content {
            display: flex;
            flex: 1;
            overflow: hidden;
        }
        
        .sidebar {
            width: 300px;
            border-right: 1px solid #eee;
            display: flex;
            flex-direction: column;
            background: #f9f9f9;
        }
        
        .sidebar-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
        }
        
        .sidebar-tab {
            flex: 1;
            text-align: center;
            padding: 15px;
            cursor: pointer;
            background: #eee;
            transition: background 0.3s;
        }
        
        .sidebar-tab.active {
            background: #6e8efb;
            color: white;
            font-weight: 600;
        }
        
        .tab-content {
            flex: 1;
            overflow-y: auto;
            display: none;
            padding: 15px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .users-list h2, .requests-list h2 {
            margin-bottom: 15px;
            color: #333;
            font-size: 18px;
            padding-bottom: 10px;
            border-bottom: 2px solid #6e8efb;
        }
        
        .user-item {
            display: flex;
            align-items: center;
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .user-item:hover {
            background: #edf2ff;
        }
        
        .user-item.active {
            background: #e0e7ff;
            border-left: 4px solid #6e8efb;
        }
        
        .user-avatar-sm {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: #a777e3;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            margin-right: 12px;
        }
        
        .request-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 8px;
            background: #f5f5f5;
        }
        
        .request-actions {
            display: flex;
            gap: 8px;
        }
        
        .action-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
        }
        
        .accept-btn {
            background: #2ed573;
            color: white;
        }
        
        .reject-btn {
            background: #ff4757;
            color: white;
        }
        
        .find-friend {
            margin-bottom: 20px;
        }
        
        .search-box {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .search-box input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            outline: none;
            font-size: 14px;
        }
        
        .search-box button {
            background: #6e8efb;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
        }
        
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background: #fafafa;
        }
        
        .message {
            max-width: 70%;
            padding: 12px 15px;
            border-radius: 18px;
            margin-bottom: 15px;
            position: relative;
            word-wrap: break-word;
        }
        
        .message.received {
            background: #e5e7eb;
            border-top-left-radius: 4px;
            align-self: flex-start;
        }
        
        .message.sent {
            background: #6e8efb;
            color: white;
            border-top-right-radius: 4px;
            align-self: flex-end;
            margin-left: auto;
        }
        
        .message-time {
            font-size: 11px;
            margin-top: 5px;
            opacity: 0.8;
            text-align: right;
        }
        
        .chat-input {
            padding: 15px 20px;
            border-top: 1px solid #eee;
            display: flex;
            gap: 10px;
        }
        
        .chat-input input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 24px;
            outline: none;
            font-size: 15px;
        }
        
        .chat-input button {
            background: #6e8efb;
            color: white;
            border: none;
            width: 45px;
            height: 45px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            transition: background 0.3s;
        }
        
        .chat-input button:hover {
            background: #5a7dfa;
        }
        
        .auth-container {
            width: 100%;
            max-width: 400px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 30px;
        }
        
        .auth-tabs {
            display: flex;
            margin-bottom: 20px;
        }
        
        .auth-tab {
            flex: 1;
            text-align: center;
            padding: 12px;
            cursor: pointer;
            background: #f0f0f0;
            transition: background 0.3s;
        }
        
        .auth-tab.active {
            background: #6e8efb;
            color: white;
            font-weight: 600;
        }
        
        .auth-form {
            display: none;
        }
        
        .auth-form.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #444;
        }
        
        .form-group input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 15px;
            outline: none;
        }
        
        .btn {
            width: 100%;
            padding: 12px;
            background: #6e8efb;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .btn:hover {
            background: #5a7dfa;
        }
        
        .block-btn {
            background: #ff4757;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
        }
        
        .block-btn:hover {
            background: #ff2e43;
        }
        
        .hidden {
            display: none;
        }
        
        .error-message {
            color: #ff4757;
            font-size: 14px;
            margin-top: 5px;
        }
        
        .success-message {
            color: #2ed573;
            font-size: 14px;
            margin-top: 5px;
        }
        
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-left: auto;
        }
        
        .status-online {
            background: #2ed573;
        }
        
        .status-offline {
            background: #ccc;
        }
        
       /* Already existing @media ke niche ye add karo */
@media (max-width: 768px) {
    body {
        padding: 10px;
    }

    .container {
        height: 100vh;
    }

    .header {
        padding: 15px;
        text-align: center;
        font-size: 18px;
    }

    .user-status {
        position: static;
        margin-top: 10px;
        justify-content: center;
    }

    .content {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        max-height: 100vh;
        overflow-y: auto;
        border-right: none;
        border-bottom: 1px solid #eee;
    }

    .chat-container {
        flex: 1;
        width: 100%;
        height: 100vh;
    }

    .chat-header {
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }

    .chat-messages {
        padding: 10px;
        font-size: 14px;
    }

    .message {
        max-width: 85%;
        font-size: 14px;
        padding: 10px 12px;
    }

    .chat-input {
        padding: 10px;
        gap: 8px;
    }

    .chat-input input {
        font-size: 14px;
        padding: 10px;
    }

    .chat-input button {
        width: 40px;
        height: 40px;
        font-size: 16px;
    }

    /* Auth forms */
    .auth-container {
        width: 100%;
        max-width: 95%;
        padding: 20px;
    }

    .auth-tab {
        font-size: 14px;
        padding: 10px;
    }

    .form-group input {
        font-size: 14px;
        padding: 10px;
    }

    .btn {
        font-size: 14px;
        padding: 10px;
    }
}

@media (max-width: 480px) {
    .app-title {
        font-size: 20px;
    }

    .user-avatar {
        width: 35px;
        height: 35px;
        font-size: 14px;
    }

    .user-avatar-sm {
        width: 30px;
        height: 30px;
        font-size: 13px;
    }

    .sidebar-tabs {
        flex-direction: column;
    }

    .sidebar-tab {
        padding: 10px;
        font-size: 14px;
    }
}
    </style>
</head>
<body>
    <!-- Authentication Container -->
    <div id="authContainer" class="auth-container">
        <div class="auth-tabs">
            <div class="auth-tab active" id="loginTab">Login</div>
            <div class="auth-tab" id="registerTab">Register</div>
        </div>
        
        <form id="loginForm" class="auth-form active">
            <div class="form-group">
                <label for="loginEmail">Email</label>
                <input type="email" id="loginEmail" required>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password</label>
                <input type="password" id="loginPassword" required>
            </div>
            <button type="submit" class="btn">Login</button>
            <div id="loginError" class="error-message"></div>
        </form>
        
        <form id="registerForm" class="auth-form">
            <div class="form-group">
                <label for="registerName">Full Name</label>
                <input type="text" id="registerName" required>
            </div>
            <div class="form-group">
                <label for="registerEmail">Email</label>
                <input type="email" id="registerEmail" required>
            </div>
            <div class="form-group">
                <label for="registerPassword">Password</label>
                <input type="password" id="registerPassword" required>
            </div>
            <button type="submit" class="btn">Register</button>
            <div id="registerError" class="error-message"></div>
        </form>
    </div>
    
    <!-- Main App Container -->
    <div id="appContainer" class="container hidden">
        <div class="header">
            <h1 class="app-title">Personal Chat App</h1>
            <div class="user-status">
                <div class="user-avatar" id="userAvatar">U</div>
                <span id="userName">User</span>
                <button id="logoutBtn" style="background: none; border: none; color: white; cursor: pointer; margin-left: 10px;">
                    <i class="fas fa-sign-out-alt"></i>
                </button>
            </div>
        </div>
        
        <div class="content">
            <div class="sidebar">
                <div class="sidebar-tabs">
                    <div class="sidebar-tab active" data-tab="friends">Friends</div>
                    <div class="sidebar-tab" data-tab="requests">Requests</div>
                    <div class="sidebar-tab" data-tab="find">Find Friends</div>
                </div>
                
                <div id="friendsTab" class="tab-content active">
                    <h2>My Friends</h2>
                    <div id="friendsContainer">
                        <!-- Friends will be populated here -->
                    </div>
                </div>
                
                <div id="requestsTab" class="tab-content">
                    <h2>Friend Requests</h2>
                    <div id="requestsContainer">
                        <!-- Friend requests will be populated here -->
                    </div>
                </div>
                
                <div id="findTab" class="tab-content">
                    <h2>Find Friends</h2>
                    <div class="find-friend">
                        <div class="search-box">
                            <input type="email" id="searchEmail" placeholder="Enter email address">
                            <button id="searchBtn">Search</button>
                        </div>
                        <div id="searchResult"></div>
                    </div>
                </div>
            </div>
            
            <div class="chat-container">
                <div class="chat-header">
                    <div>
                        <strong id="currentChatUser">Select a friend to chat</strong>
                    </div>
                    <button id="blockUserBtn" class="block-btn hidden">Block User</button>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <!-- Messages will be populated here -->
                    <div class="welcome-message">
                        <p style="text-align: center; color: #777;">Select a friend from your list to start chatting</p>
                    </div>
                </div>
                
                <div class="chat-input">
                    <input type="text" id="messageInput" placeholder="Type your message..." disabled>
                    <button id="sendMessageBtn" disabled><i class="fas fa-paper-plane"></i></button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyBgBLHaDzznMejADm5fYVGf5OWitYdgrKk",
            authDomain: "sangam-29b02.firebaseapp.com",
            databaseURL: "https://sangam-29b02-default-rtdb.firebaseio.com",
            projectId: "sangam-29b02",
            storageBucket: "sangam-29b02.firebasestorage.app",
            messagingSenderId: "568571041381",
            appId: "1:568571041381:web:00a0b5b26127435dde188c",
            measurementId: "G-SLLJ8R1BE3"
        };
        
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const database = firebase.database();
        
        // DOM Elements
        const authContainer = document.getElementById('authContainer');
        const appContainer = document.getElementById('appContainer');
        const loginTab = document.getElementById('loginTab');
        const registerTab = document.getElementById('registerTab');
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        const loginError = document.getElementById('loginError');
        const registerError = document.getElementById('registerError');
        const logoutBtn = document.getElementById('logoutBtn');
        const userAvatar = document.getElementById('userAvatar');
        const userName = document.getElementById('userName');
        const friendsContainer = document.getElementById('friendsContainer');
        const requestsContainer = document.getElementById('requestsContainer');
        const currentChatUser = document.getElementById('currentChatUser');
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendMessageBtn = document.getElementById('sendMessageBtn');
        const blockUserBtn = document.getElementById('blockUserBtn');
        const searchEmail = document.getElementById('searchEmail');
        const searchBtn = document.getElementById('searchBtn');
        const searchResult = document.getElementById('searchResult');
        const sidebarTabs = document.querySelectorAll('.sidebar-tab');
        const tabContents = document.querySelectorAll('.tab-content');
        
        // Variables
        let currentUser = null;
        let selectedUser = null;
        let friends = [];
        let friendRequests = [];
        let blockedUsers = [];
        
        // Auth tabs functionality
        loginTab.addEventListener('click', () => {
            loginTab.classList.add('active');
            registerTab.classList.remove('active');
            loginForm.classList.add('active');
            registerForm.classList.remove('active');
        });
        
        registerTab.addEventListener('click', () => {
            registerTab.classList.add('active');
            loginTab.classList.remove('active');
            registerForm.classList.add('active');
            loginForm.classList.remove('active');
        });
        
        // Sidebar tabs functionality
        sidebarTabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.getAttribute('data-tab');
                
                // Activate tab
                sidebarTabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Show corresponding content
                tabContents.forEach(content => content.classList.remove('active'));
                document.getElementById(tabName + 'Tab').classList.add('active');
            });
        });
        
        // Login functionality
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            auth.signInWithEmailAndPassword(email, password)
                .then((userCredential) => {
                    currentUser = userCredential.user;
                    loginError.textContent = '';
                    loadUserData();
                })
                .catch((error) => {
                    loginError.textContent = error.message;
                });
        });
        
        // Register functionality
        registerForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const name = document.getElementById('registerName').value;
            const email = document.getElementById('registerEmail').value;
            const password = document.getElementById('registerPassword').value;
            
            auth.createUserWithEmailAndPassword(email, password)
                .then((userCredential) => {
                    currentUser = userCredential.user;
                    
                    // Save user data to database
                    return database.ref('users/' + currentUser.uid).set({
                        name: name,
                        email: email,
                        createdAt: firebase.database.ServerValue.TIMESTAMP,
                        lastOnline: firebase.database.ServerValue.TIMESTAMP
                    });
                })
                .then(() => {
                    registerError.textContent = '';
                    loadUserData();
                })
                .catch((error) => {
                    registerError.textContent = error.message;
                });
        });
        
        // Logout functionality
        logoutBtn.addEventListener('click', () => {
            // Update last online status
            if (currentUser) {
                database.ref('users/' + currentUser.uid + '/lastOnline').set(
                    firebase.database.ServerValue.TIMESTAMP
                );
            }
            
            auth.signOut().then(() => {
                currentUser = null;
                authContainer.classList.remove('hidden');
                appContainer.classList.add('hidden');
            });
        });
        
        // Search for friends by email
        searchBtn.addEventListener('click', () => {
            const email = searchEmail.value.trim();
            
            if (!email) {
                searchResult.innerHTML = '<p class="error-message">Please enter an email address</p>';
                return;
            }
            
            // Search for user by email
            database.ref('users').orderByChild('email').equalTo(email).once('value')
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        let userData;
                        let userId;
                        
                        snapshot.forEach((childSnapshot) => {
                            userId = childSnapshot.key;
                            userData = childSnapshot.val();
                        });
                        
                        // Check if it's the current user
                        if (userId === currentUser.uid) {
                            searchResult.innerHTML = '<p class="error-message">You cannot add yourself as a friend</p>';
                            return;
                        }
                        
                        // Check if already friends
                        database.ref('friends/' + currentUser.uid + '/' + userId).once('value')
                            .then((friendSnapshot) => {
                                if (friendSnapshot.exists()) {
                                    searchResult.innerHTML = '<p class="error-message">You are already friends with this user</p>';
                                    return;
                                }
                                
                                // Check if request already sent
                                database.ref('friendRequests/' + userId + '/' + currentUser.uid).once('value')
                                    .then((requestSnapshot) => {
                                        if (requestSnapshot.exists()) {
                                            searchResult.innerHTML = '<p class="error-message">Friend request already sent</p>';
                                            return;
                                        }
                                        
                                        // Show user and option to send request
                                        searchResult.innerHTML = `
                                            <div class="user-item">
                                                <div class="user-avatar-sm">${userData.name.charAt(0).toUpperCase()}</div>
                                                <div>${userData.name} (${userData.email})</div>
                                                <button class="action-btn accept-btn" id="sendRequestBtn">Send Request</button>
                                            </div>
                                        `;
                                        
                                        document.getElementById('sendRequestBtn').addEventListener('click', () => {
                                            sendFriendRequest(userId, userData);
                                        });
                                    });
                            });
                    } else {
                        searchResult.innerHTML = '<p class="error-message">No user found with this email</p>';
                    }
                })
                .catch((error) => {
                    searchResult.innerHTML = `<p class="error-message">Error: ${error.message}</p>`;
                });
        });
        
        // Send friend request
        function sendFriendRequest(userId, userData) {
            // Create request in recipient's list
            database.ref('friendRequests/' + userId + '/' + currentUser.uid).set({
                name: currentUser.displayName || userName.textContent,
                email: currentUser.email,
                timestamp: firebase.database.ServerValue.TIMESTAMP
            })
            .then(() => {
                searchResult.innerHTML = '<p class="success-message">Friend request sent successfully!</p>';
            })
            .catch((error) => {
                searchResult.innerHTML = `<p class="error-message">Error: ${error.message}</p>`;
            });
        }
        
        // Load user data and contacts
        function loadUserData() {
            if (!currentUser) return;
            
            // Get current user details
            database.ref('users/' + currentUser.uid).once('value')
                .then((snapshot) => {
                    const userData = snapshot.val();
                    userAvatar.textContent = userData.name.charAt(0).toUpperCase();
                    userName.textContent = userData.name;
                    
                    // Update online status
                    database.ref('users/' + currentUser.uid + '/lastOnline').set(
                        firebase.database.ServerValue.TIMESTAMP
                    );
                    
                    authContainer.classList.add('hidden');
                    appContainer.classList.remove('hidden');
                    
                    // Load friends, requests and blocked users
                    loadFriends();
                    loadFriendRequests();
                    loadBlockedUsers();
                });
        }
        
        // Load friends list
        function loadFriends() {
            database.ref('friends/' + currentUser.uid).on('value', (snapshot) => {
                friendsContainer.innerHTML = '';
                friends = [];
                
                if (!snapshot.exists()) {
                    friendsContainer.innerHTML = '<p style="text-align: center; color: #777; margin-top: 20px;">No friends yet. Find friends to start chatting!</p>';
                    return;
                }
                
                snapshot.forEach((childSnapshot) => {
                    const friendId = childSnapshot.key;
                    const friendData = childSnapshot.val();
                    
                    friends.push({
                        uid: friendId,
                        ...friendData
                    });
                    
                    // Also get the latest user data for online status
                    database.ref('users/' + friendId).once('value').then((userSnapshot) => {
                        const userData = userSnapshot.val();
                        
                        const friendElement = document.createElement('div');
                        friendElement.className = 'user-item';
                        friendElement.dataset.uid = friendId;
                        
                        // Determine online status (within last 5 minutes)
                        const isOnline = userData.lastOnline && 
                                        (Date.now() - userData.lastOnline) < 300000;
                        
                        friendElement.innerHTML = `
                            <div class="user-avatar-sm">${friendData.name.charAt(0).toUpperCase()}</div>
                            <div>${friendData.name}</div>
                            <div class="status-indicator ${isOnline ? 'status-online' : 'status-offline'}"></div>
                        `;
                        
                        friendElement.addEventListener('click', () => {
                            selectUser({
                                uid: friendId,
                                name: friendData.name
                            });
                        });
                        
                        friendsContainer.appendChild(friendElement);
                    });
                });
            });
        }
        
        // Load friend requests
        function loadFriendRequests() {
            database.ref('friendRequests/' + currentUser.uid).on('value', (snapshot) => {
                requestsContainer.innerHTML = '';
                friendRequests = [];
                
                if (!snapshot.exists()) {
                    requestsContainer.innerHTML = '<p style="text-align: center; color: #777; margin-top: 20px;">No pending friend requests</p>';
                    return;
                }
                
                snapshot.forEach((childSnapshot) => {
                    const requestId = childSnapshot.key;
                    const requestData = childSnapshot.val();
                    
                    friendRequests.push({
                        uid: requestId,
                        ...requestData
                    });
                    
                    const requestElement = document.createElement('div');
                    requestElement.className = 'request-item';
                    
                    requestElement.innerHTML = `
                        <div style="display: flex; align-items: center;">
                            <div class="user-avatar-sm">${requestData.name.charAt(0).toUpperCase()}</div>
                            <div>${requestData.name} (${requestData.email})</div>
                        </div>
                        <div class="request-actions">
                            <button class="action-btn accept-btn" data-action="accept" data-uid="${requestId}">Accept</button>
                            <button class="action-btn reject-btn" data-action="reject" data-uid="${requestId}">Reject</button>
                        </div>
                    `;
                    
                    requestsContainer.appendChild(requestElement);
                });
                
                // Add event listeners to action buttons
                document.querySelectorAll('[data-action="accept"]').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        const requestId = e.target.getAttribute('data-uid');
                        acceptFriendRequest(requestId);
                    });
                });
                
                document.querySelectorAll('[data-action="reject"]').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        const requestId = e.target.getAttribute('data-uid');
                        rejectFriendRequest(requestId);
                    });
                });
            });
        }
        
        // Accept friend request
        function acceptFriendRequest(requestId) {
            // Get request data first
            database.ref('friendRequests/' + currentUser.uid + '/' + requestId).once('value')
                .then((snapshot) => {
                    const requestData = snapshot.val();
                    
                    // Add to current user's friends list
                    database.ref('friends/' + currentUser.uid + '/' + requestId).set({
                        name: requestData.name,
                        email: requestData.email,
                        timestamp: firebase.database.ServerValue.TIMESTAMP
                    });
                    
                    // Add the requester to their own friends list
                    database.ref('users/' + requestId).once('value')
                        .then((userSnapshot) => {
                            const userData = userSnapshot.val();
                            
                            database.ref('friends/' + requestId + '/' + currentUser.uid).set({
                                name: userName.textContent,
                                email: currentUser.email,
                                timestamp: firebase.database.ServerValue.TIMESTAMP
                            });
                            
                            // Remove the request
                            database.ref('friendRequests/' + currentUser.uid + '/' + requestId).remove();
                        });
                });
        }
        
        // Reject friend request
        function rejectFriendRequest(requestId) {
            database.ref('friendRequests/' + currentUser.uid + '/' + requestId).remove();
        }
        
        // Load blocked users list
        function loadBlockedUsers() {
            database.ref('blockedUsers/' + currentUser.uid).on('value', (snapshot) => {
                blockedUsers = [];
                snapshot.forEach((childSnapshot) => {
                    blockedUsers.push(childSnapshot.key);
                });
            });
        }
        
        // Select a user to chat with
        function selectUser(user) {
            selectedUser = user;
            
            // Update UI
            document.querySelectorAll('.user-item').forEach(item => {
                item.classList.remove('active');
            });
            document.querySelector(`.user-item[data-uid="${user.uid}"]`).classList.add('active');
            
            currentChatUser.textContent = user.name;
            blockUserBtn.classList.remove('hidden');
            
            // Check if user is blocked
            if (blockedUsers.includes(user.uid)) {
                blockUserBtn.textContent = 'Unblock User';
                messageInput.disabled = true;
                sendMessageBtn.disabled = true;
                messageInput.placeholder = 'You have blocked this user';
            } else {
                blockUserBtn.textContent = 'Block User';
                messageInput.disabled = false;
                sendMessageBtn.disabled = false;
                messageInput.placeholder = 'Type your message...';
            }
            
            // Load messages
            loadMessages(user.uid);
        }
        
        // Load messages between current user and selected user
        function loadMessages(otherUserId) {
            chatMessages.innerHTML = '';
            
            const chatId = getChatId(currentUser.uid, otherUserId);
            
            database.ref('messages/' + chatId).orderByChild('timestamp').on('value', (snapshot) => {
                chatMessages.innerHTML = '';
                
                if (!snapshot.exists()) {
                    chatMessages.innerHTML = '<div class="welcome-message"><p style="text-align: center; color: #777;">No messages yet. Start a conversation!</p></div>';
                    return;
                }
                
                snapshot.forEach((childSnapshot) => {
                    const message = childSnapshot.val();
                    displayMessage(message);
                });
                
                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            });
        }
        
        // Display a message in the chat
        function displayMessage(message) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${message.senderId === currentUser.uid ? 'sent' : 'received'}`;
            
            const time = new Date(message.timestamp);
            const timeString = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            messageElement.innerHTML = `
                <div class="message-text">${message.text}</div>
                <div class="message-time">${timeString}</div>
            `;
            
            chatMessages.appendChild(messageElement);
        }
        
        // Send a message
        sendMessageBtn.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        function sendMessage() {
            if (!selectedUser || !messageInput.value.trim()) return;
            
            const chatId = getChatId(currentUser.uid, selectedUser.uid);
            const message = {
                text: messageInput.value.trim(),
                senderId: currentUser.uid,
                receiverId: selectedUser.uid,
                timestamp: firebase.database.ServerValue.TIMESTAMP
            };
            
            database.ref('messages/' + chatId).push(message);
            messageInput.value = '';
        }
        
        // Block/Unblock user
        blockUserBtn.addEventListener('click', () => {
            if (!selectedUser) return;
            
            if (blockedUsers.includes(selectedUser.uid)) {
                // Unblock user
                database.ref('blockedUsers/' + currentUser.uid + '/' + selectedUser.uid).remove()
                    .then(() => {
                        blockUserBtn.textContent = 'Block User';
                        messageInput.disabled = false;
                        sendMessageBtn.disabled = false;
                        messageInput.placeholder = 'Type your message...';
                    });
            } else {
                // Block user
                database.ref('blockedUsers/' + currentUser.uid + '/' + selectedUser.uid).set(true)
                    .then(() => {
                        blockUserBtn.textContent = 'Unblock User';
                        messageInput.disabled = true;
                        sendMessageBtn.disabled = true;
                        messageInput.placeholder = 'You have blocked this user';
                    });
            }
        });
        
        // Helper function to generate consistent chat ID
        function getChatId(uid1, uid2) {
            return uid1 < uid2 ? uid1 + '_' + uid2 : uid2 + '_' + uid1;
        }
        
        // Check auth state
        auth.onAuthStateChanged((user) => {
            if (user) {
                currentUser = user;
                loadUserData();
            } else {
                authContainer.classList.remove('hidden');
                appContainer.classList.add('hidden');
            }
        });
        
        // Update online status periodically
        setInterval(() => {
            if (currentUser) {
                database.ref('users/' + currentUser.uid + '/lastOnline').set(
                    firebase.database.ServerValue.TIMESTAMP
                );
            }
        }, 60000); // Update every minute
    </script>
</body>
</html>
